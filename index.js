const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs')
const statsFile = 'stats.json';
const muvies = 'movies.txt'
const token = '8012062999:AAH-Dvc0R59fZkaTcvBLlVCp9tJHy48ovjA'

const bot = new TelegramBot(token, {polling: true});

const bannedWords = fs.readFileSync('badWords', 'utf8')
    .split('\n')
    .map(word => word.trim().toLowerCase())
    .filter(word => word)


const targetName = ['–¥–∞–Ω–∏–ª', '–∏–ª—å—è', '—Ä–æ–º–∞', '–∏–ª—é—Ö–∞']

const games = ['CS2', 'Dota 2', 'FarCry', 'The Dark Pictures', '–ò–¥–∏ —É—Ä–æ–∫–∏ —É—á–∏, –¥–µ–±–∏–ª', 'PUBG', 'ETS2', '–°–∏–º—É–ª—è—Ç–æ—Ä –®–∞—É—Ä–º–∏—á–Ω–æ–π', '–ß—Ç–æ –Ω–∏–±—É–¥—å –Ω–æ–≤–µ–Ω—å–∫–æ–µ', '–ë–∏–ª—å—è—Ä–¥']


// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
let stats = {}
try {
    stats = JSON.parse(fs.readFileSync(statsFile))
} catch (e) {
    stats = {}
}

const movies = fs.readFileSync(muvies, 'utf8')
    .split('\n')
    .map(word => word.trim().toLowerCase())
    .filter(word => word.length > 0);

function saveStats() {
    fs.writeFileSync(statsFile, JSON.stringify(stats, null, 2))
}

// –í—ã–≤–æ–¥ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
const getRandomInt = (min, max) => {
    return Math.floor(Math.random() * (max - min)+1) + min;
}

const randomGame = () => {
    const randNum = getRandomInt(0, games.length);
    return games[randNum]
}

const randomMovies = () => {
    const randNum = getRandomInt(0, 50);
    return movies[randNum]
}

const start = () => {

    // –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    bot.setMyCommands([
        {command: '/spam', description: '–ó–∞—Å–ø–∞–º–∏—Ç—å –≤ —á–∞—Ç'},
        {command: '/start', description: '–°—Ç–∞—Ä—Ç'},
        {command: '/stats', description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º'},
        {command: '/game', description: '–†—É–ª–µ—Ç–∫–∞ —Å–æ —Å–ª—É—á–∞–π–Ω–æ–π –∏–≥—Ä–æ–π'},
        {command: '/movie', description: '–†–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∏–ª—å–º –∏–∑ —Ç–æ–ø 50 –ª—É—á—à–∏—Ö'},
        {command: '/roll', description: '–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä /roll 50 - 100'}
    ])


    // –ú–æ–¥–µ—Ä–∞—Ü–∏—è –±–∞–Ω–Ω —Å–ª–æ–≤
    bot.on('text', async (msg) => {
        const text = msg.text ? msg.text.toLowerCase() : '';
        const chatId = msg.chat.id;


        if (text) {
            const hasTargetName = targetName.some(name =>
                text.includes(name.toLowerCase())
            );
            const hasBannedWord = bannedWords.some(word =>
                text.includes(word.toLowerCase())
            );

            if (hasTargetName && hasBannedWord) {
                await bot.deleteMessage(chatId, msg.message_id)
            }
        }
    })



    // –†–µ–∞–∫—Ü–∏—è –±–æ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    bot.on('message', async msg => {
        const text = msg.text;
        const chatId = msg.chat.id

        if (text === '/start') {
            await bot.sendMessage(chatId, '@DanilSavitskiy');
        }

        if (text === '/spam') {
            await bot.sendMessage(chatId, '–°–∫–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π');
            bot.once('text', async (ctx) => {
                const count = Number(ctx.text);

                if (isNaN(count)) {
                    await bot.sendMessage(chatId, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —á–∏—Å–ª–æ');
                }
                try {
                    for (let i = 0; i < count; i++) {
                        await bot.sendMessage(chatId, '@DanilSavitskiy');
                        await new Promise(resolve => setTimeout(resolve, 500));
                    }
                } catch (error) {
                    await bot.sendMessage(chatId, '–î–∞–ª—å—à–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ –º–æ–≥—É, –¢–ì –±–∞–Ω–∏—Ç')
                }
            })
        }


        if (text === '/stats') {
            const sortedUsers = Object.entries(stats)
                .sort((a, b) => b[1].messages - a[1].messages)
                .slice(0, 10)

            if (sortedUsers.length === 0) {
                await bot.sendMessage(chatId, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞');
                return;
            }

            let reply = 'üèÜ **–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º:**\n\n'
            sortedUsers.forEach(([userId, data], index) => {
                reply += `${index+1}. ${data.username}: ${data.messages} —Å–æ–æ–±—â–µ–Ω–∏–π. \n`
            })

            await bot.sendMessage(chatId, reply);
        }

        if (text === '/game') {
            await bot.sendMessage(chatId, String(randomGame()))
        }

        if (text === '/movie') {
            await bot.sendMessage(chatId, String(randomMovies()))
        }

    })

    // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    bot.on('message', async (msg) => {
        const userId = msg.from.id;
        const username = msg.from.username || `${msg.from.first_name} ${msg.from.last_name || ''}`.trim()

        if (!stats[userId]) {
            stats[userId] = {
                username: username,
                messages: 0
            }
        }

        stats[userId].messages++;
        saveStats();
    })
}


start();